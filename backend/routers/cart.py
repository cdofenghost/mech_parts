from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from ..database import get_db
from ..models.order import Order
from ..models.cart import CartItem
from ..models.user import User
from ..schemas.cart import CartItemCreate, CartItemResponse
from ..models.car import Part
from datetime import datetime

cart_router = APIRouter(prefix="/cart")

@cart_router.post("/add", response_model=CartItemResponse)
async def add_to_cart(cart_data: CartItemCreate, user_id: int, db: Session = Depends(get_db)):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∑–∞–∫–∞–∑—É."""
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    part = db.query(Part).filter(Part.id == cart_data.part_id).first()
    if not part:
        raise HTTPException(status_code=404, detail="–ó–∞–ø—á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π "–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π" –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    order = db.query(Order).filter(Order.user_id == user_id, Order.status == "pending").first()
    if not order:
        order = Order(user_id=user_id, status="pending", created_at=datetime.utcnow())
        db.add(order)
        db.commit()
        db.refresh(order)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ
    cart_item = db.query(CartItem).filter(CartItem.order_id == order.id, CartItem.part_id == cart_data.part_id).first()

    if cart_item:
        cart_item.quantity += cart_data.quantity
    else:
        cart_item = CartItem(order_id=order.id, part_id=cart_data.part_id, quantity=cart_data.quantity)
        db.add(cart_item)

    db.commit()
    db.refresh(cart_item)
    return cart_item

@cart_router.get("/{user_id}", response_model=list[CartItemResponse])
async def get_cart(user_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    order = db.query(Order).filter(Order.user_id == user_id, Order.status == "pending").first()
    if not order:
        raise HTTPException(status_code=404, detail="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")

    return db.query(CartItem).filter(CartItem.order_id == order.id).all()

@cart_router.delete("/remove")
async def remove_from_cart(user_id: int, part_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    order = db.query(Order).filter(Order.user_id == user_id, Order.status == "pending").first()
    if not order:
        raise HTTPException(status_code=404, detail="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")

    cart_item = db.query(CartItem).filter(CartItem.order_id == order.id, CartItem.part_id == part_id).first()

    if not cart_item:
        raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    db.delete(cart_item)
    db.commit()

    # üî• –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è - —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    remaining_items = db.query(CartItem).filter(CartItem.order_id == order.id).count()
    if remaining_items == 0:
        db.delete(order)
        db.commit()

    return {"message": "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"}



@cart_router.delete("/clear/{user_id}")
async def clear_cart(user_id: int, db: Session = Depends(get_db)):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞)."""
    order = db.query(Order).filter(Order.user_id == user_id, Order.status == "pending").first()
    if not order:
        raise HTTPException(status_code=404, detail="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")

    db.query(CartItem).filter(CartItem.order_id == order.id).delete()
    db.commit()
    return {"message": "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞"}
